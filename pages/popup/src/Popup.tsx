import '@src/Popup.css';
import { useStorage, withErrorBoundary, withSuspense } from '@extension/shared';
import { exampleThemeStorage } from '@extension/storage';
import type { ComponentPropsWithoutRef } from 'react';
import { useEffect, useRef, useState } from 'react';
import React from 'react';

import { useGetVibes } from './useGetVibes';

const Popup = () => {
  const { pageHTML, screenshotUrl, musicRecommendation } = useGetVibes();

  const theme = useStorage(exampleThemeStorage);
  const isLight = theme === 'light';
  const logo = isLight ? 'popup/logo_vertical.svg' : 'popup/logo_vertical_dark.svg';

  return (
    <div className={`App ${isLight ? 'bg-slate-50' : 'bg-gray-800'} h-screen overflow-auto`}>
      <header className={`App-header ${isLight ? 'text-gray-900' : 'text-gray-100'}`}>
        <ToggleButton>Toggle theme</ToggleButton>

        <img src={chrome.runtime.getURL(logo)} className="App-logo" alt="logo" />
      </header>

      <AudioButton>Play Music!</AudioButton>

      <div className="p-4">
        {' '}
        {musicRecommendation && (
          <div className="mt-4">
            <h3 className="font-bold">Music Recommendation:</h3>
            <p>{musicRecommendation}</p>
          </div>
        )}
        {/* {pageHTML && (
          <div className="mt-4">
            <h3 className="font-bold">Extracted Page HTML:</h3>
            <textarea value={pageHTML} readOnly rows={10} cols={30} className="w-full p-2 border" />
          </div>
        )} */}
        {screenshotUrl && (
          <div className="mt-4">
            <h3 className="font-bold">Screenshot:</h3>
            <img src={screenshotUrl} alt="Screenshot" style={{ maxWidth: '100%' }} />
          </div>
        )}
      </div>
    </div>
  );
};

// This is the genre generated by the AI
const genre = 'happy';

// List of files in each genre folder
const genreAudioFiles: any = {
  happy: [
    './music/happy/happy1.mp3',
    './music/happy/happy2.mp3',
    './music/happy/happy3.mp3',
    './music/happy/happy4.mp3',
  ],
  // sad: ['./music/sad/sad1.mp3', './music/sad/sad2.mp3', './music/sad/sad3.mp3'],
  // romantic: ['./music/romantic/romantic1.mp3', './music/romantic/romantic2.mp3', './music/romantic/romantic3.mp3'],
  // dramatic: ['./music/dramatic/dramatic1.mp3', './music/dramatic/dramatic2.mp3', './music/dramatic/dramatic3.mp3'],
};

const getRandomSong = (genre: string) => {
  const files = genreAudioFiles[genre];
  const randomIndex = Math.floor(Math.random() * files.length);
  return files[randomIndex];
};

const AudioButton = (props: ComponentPropsWithoutRef<'button'>) => {
  const [audioFile, setAudioFile] = useState(getRandomSong(genre));
  const [isPlaying, setIsPlaying] = useState(false);

  const audioRef = useRef(new Audio(audioFile));
  const fadeDuration = 1000; // duration in ms for fade in/out

  const fadeOut = async () => {
    for (let volume = 1; volume > 0; volume -= 0.1) {
      audioRef.current.volume = volume;
      await new Promise(resolve => setTimeout(resolve, fadeDuration / 10));
    }
    audioRef.current.pause();
    audioRef.current.volume = 1; // reset volume for the next track
  };

  const fadeIn = async () => {
    audioRef.current.volume = 0;
    audioRef.current.play();
    for (let volume = 0; volume <= 1; volume += 0.1) {
      audioRef.current.volume = volume;
      await new Promise(resolve => setTimeout(resolve, fadeDuration / 10));
    }
  };

  const handleClick = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
        setIsPlaying(false);
      } else {
        audioRef.current.play();
        setIsPlaying(true);
      }
    }
  };

  useEffect(() => {
    const audio = audioRef.current;
    const handleAudioEnd = () => setIsPlaying(false);
    audio.addEventListener('ended', handleAudioEnd);

    return () => {
      audio.removeEventListener('ended', handleAudioEnd);
    };
  }, []);

  return (
    <button
      className={props.className + ' ' + 'font-bold py-1 px-4 rounded shadow hover:scale-105 '}
      onClick={handleClick}>
      {isPlaying ? 'Pause' : 'Play'} {props.children}
    </button>
  );
};

const UpdateGenreButton = ({ genre, onUpdateGenre }: any) => {
  return (
    <button onClick={() => onUpdateGenre(genre)} className="font-bold py-1 px-4 rounded shadow hover:scale-105">
      Play New {genre.charAt(0).toUpperCase() + genre.slice(1)} Track
    </button>
  );
};

const ToggleButton = (props: ComponentPropsWithoutRef<'button'>) => {
  const theme = useStorage(exampleThemeStorage);
  return (
    <button
      className={
        props.className +
        ' ' +
        'font-bold py-1 px-4 rounded shadow hover:scale-105 ' +
        (theme === 'light' ? 'bg-white text-black shadow-black' : 'bg-black text-white')
      }
      onClick={exampleThemeStorage.toggle}>
      {props.children}
    </button>
  );
};

export default withErrorBoundary(withSuspense(Popup, <div>Loading...</div>), <div>Error Occurred</div>);
